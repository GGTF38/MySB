#!/bin/bash
# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
##################### FIRST LINE #####################################
# Use this script with a pipeline OR manualy.
#
#   1/  Auto generate images with a pipeline:
#	   >   With a pipeline, you can edit 'IMG_TO_BUILD' secret variable to select images to build.
#		   Leave blank this variable for auto detect images in ci/images/.
#	   >   To exclude an image from auto listing, change folder name and add a _ (underscore) to the begining of name (ex: _php).
#
#   2/  Mmanualy generate images by command line:
#	   >   Execute this script with the following parameters:
#		   Params 1: Root dir of the project GitLab
#		   Params 2: Images list with space separator.
#		   Ex: bash 100-start_build.bsh /opt/MySB "image1 image2"
######################################################################

#### VARs
# Colors
CEND="\033[0m"
CRED="\033[1;31m"
CGREEN="\033[1;32m"
CYELLOW="\033[1;33m"
CBLUE="\033[1;34m"
# GitLab / Docker
[[ -z "${CI_PROJECT_NAMESPACE}" ]] && CI_PROJECT_NAMESPACE="toulousain79"
[[ -z "${CI_PROJECT_NAME}" ]] && CI_PROJECT_NAME="MySB"
[[ -z "${CI_REGISTRY_IMAGE}" ]] && CI_REGISTRY_IMAGE="registry.gitlab.com/toulousain79/mysb"
[[ -z "${CI_COMMIT_REF_NAME}" ]] && CI_COMMIT_REF_NAME="develop"
[[ -z "${CI_COMMIT_SHA}" ]] && CI_COMMIT_SHA="${CI_COMMIT_REF_NAME}"
[[ -z "${CI_COMMIT_SHA}" ]] && CI_COMMIT_SHA="${CI_COMMIT_REF_NAME}"
[[ -z "${CI_PROJECT_URL}" ]] && CI_PROJECT_URL="https://gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"
[[ -z "${CI_PROJECT_DIR}" ]] && CI_PROJECT_DIR="${1}"
[[ -z "${CI_PROJECT_DIR}" ]] && return 1
# Docker Hub
sProjectName="$(echo "${CI_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')"

# Images list
sImageList=()
if [ -n "$IMG_TO_BUILD" ] || [ -n "${2}" ]; then
	for sImage in ${IMG_TO_BUILD}; do
		sImageList+=("${sImage}")
	done
	for sImage in ${2}; do
		sImageList+=("${sImage}")
	done
else
	sImageList+=('base-debian' 'base-alpine')
	for sImage in $(ls -l ${CI_PROJECT_DIR}/ci/images/ | egrep '^d' | awk '{print $9}' | grep -v 'base' | grep -v '^_' | grep -v 'STANDBY'); do
		sImageList+=("${sImage}")
	done
fi


#### Execute all builds
for sImage in "${sImageList[@]}"; do
	#### VARs
	sFirstUpper=${sImage^}
	sDate=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
	nReturn=0

	# Ignore if no directory image
	[[ ! -d ${CI_PROJECT_DIR}/ci/images/${sImage}/ ]] && continue

	#### TAGs GitLab registry
	sTags="--tag ${CI_REGISTRY_IMAGE}/${sImage}/${sImage}:latest"
	#sTags="--tag ${sImage}:latest"

	#### TAGs Docker Hub registry (No Tags for bases images develop branch)
	if [[ ! ${sImage} = *"base"* ]] && [[ ! ${CI_COMMIT_REF_NAME} = "develop" ]]; then
		sTags="${sTags} --tag ${sProjectName}/${sImage}:${CI_COMMIT_REF_NAME} --tag ${sProjectName}/${sImage}:latest"
	fi

	#### Building
	echo && echo -e "${CBLUE}*** Building${CEND} ${CYELLOW}$sFirstUpper${CEND} ${CBLUE}Docker image ***${CEND}"
	docker build --compress --force-rm --rm \
		--build-arg REGISTRY_IMAGE=${CI_REGISTRY_IMAGE} \
		--build-arg PROJECT_NAMESPACE=${CI_PROJECT_NAMESPACE} \
		--build-arg PROJECT_NAME=${CI_PROJECT_NAME} \
		--build-arg BUILD_DATE=${sDate} \
		--build-arg BUILD_VERSION=${CI_COMMIT_REF_NAME} \
		--build-arg BUILD_REF=${CI_COMMIT_SHA} \
		--build-arg PROJECT_DESCRIPTION="MySB - $sFirstUpper Docker image" \
		--build-arg PROJECT_URL=${CI_PROJECT_URL} \
		${sTags} \
		${CI_PROJECT_DIR}/ci/images/${sImage}/ && sResultMessage="${CGREEN}Succeeded${CEND}" || sResultMessage="${CRED}Failed${CEND}" nReturn=1
	echo -e "${CYELLOW}Building $sFirstUpper image: ${CEND}$sResultMessage"
	[[ ${nReturn} -ne 0 ]] && exit ${nReturn}

	#### Push to GitLab Regsitry
	if [ ${nReturn} -eq 0 ]; then
		echo && echo -e "${CBLUE}*** Pushing${CEND} ${CYELLOW}$sFirstUpper latest${CEND} ${CBLUE}Docker image to GitLab Regsitry ***${CEND}"
		docker push ${CI_REGISTRY_IMAGE}/${sImage}/${sImage}:latest && sResultMessage="${CGREEN}Succeeded${CEND}" || sResultMessage="${CRED}Failed${CEND}" nReturn=1
		echo -e "${CYELLOW}Pushing $sFirstUpper${CEND} ${CBLUE}latest${CEND} ${CYELLOW}image to GitLab registry: ${CEND}$sResultMessage"
	fi

	#### Push to Docker Hub Regsitry
	if [[ ! ${sImage} = *"base"* ]] && [[ ! ${CI_COMMIT_REF_NAME} = "develop" ]]; then
		if [ ${nReturn} -eq 0 ]; then
			echo && echo -e "${CBLUE}*** Pushing${CEND} ${CYELLOW}$sFirstUpper ${CI_COMMIT_REF_NAME}${CEND} ${CBLUE}Docker image to Docker Hub Regsitry ***${CEND}"
			docker push ${sProjectName}/${sImage}:${CI_COMMIT_REF_NAME} && sResultMessage="${CGREEN}Succeeded${CEND}" || sResultMessage="${CRED}Failed${CEND}" nReturn=1
			echo -e "${CYELLOW}Pushing $sFirstUpper${CEND} ${CBLUE}${CI_COMMIT_REF_NAME}${CEND} ${CYELLOW}image to Docker Hub registry: ${CEND}$sResultMessage"
		fi
		if [ ${nReturn} -eq 0 ]; then
			echo && echo -e "${CBLUE}*** Pushing${CEND} ${CYELLOW}$sFirstUpper latest${CEND} ${CBLUE}Docker image to Docker Hub Regsitry ***${CEND}"
			docker push ${sProjectName}/${sImage}:latest && sResultMessage="${CGREEN}Succeeded${CEND}" || sResultMessage="${CRED}Failed${CEND}" nReturn=1
			echo -e "${CYELLOW}Pushing $sFirstUpper${CEND} ${CBLUE}latest${CEND} ${CYELLOW}image to Docker Hub registry: ${CEND}$sResultMessage"
		fi
	fi
done
echo

##################### LAST LINE ######################################
