# ----------------------------------
#  __/\\\\____________/\\\\___________________/\\\\\\\\\\\____/\\\\\\\\\\\\\___
#   _\/\\\\\\________/\\\\\\_________________/\\\/////////\\\_\/\\\/////////\\\_
#	_\/\\\//\\\____/\\\//\\\____/\\\__/\\\__\//\\\______\///__\/\\\_______\/\\\_
#	 _\/\\\\///\\\/\\\/_\/\\\___\//\\\/\\\____\////\\\_________\/\\\\\\\\\\\\\\__
#	  _\/\\\__\///\\\/___\/\\\____\//\\\\\________\////\\\______\/\\\/////////\\\_
#	   _\/\\\____\///_____\/\\\_____\//\\\____________\////\\\___\/\\\_______\/\\\_
#		_\/\\\_____________\/\\\__/\\_/\\\______/\\\______\//\\\__\/\\\_______\/\\\_
#		 _\/\\\_____________\/\\\_\//\\\\/______\///\\\\\\\\\\\/___\/\\\\\\\\\\\\\/__
#		  _\///______________\///___\////__________\///////////_____\/////////////_____
#			By toulousain79 ---> https://github.com/toulousain79/
#
######################################################################
#
#	Copyright (c) 2013 toulousain79 (https://github.com/toulousain79/)
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#	IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#	--> Licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
#
######################################################################
funcs_Install=1
##################### FIRST LINE #####################################

#### Logrotate
gfnLogRotate() {
	if [ ! -z "$1" ] && [ -f $MySB_InstallDir/templates/logrotate/etc.logrotate.d.$1.tmpl ]; then
		rm -vf /etc/logrotate.d/$1*
		install -v -o root -g root -m 0644 $MySB_InstallDir/templates/logrotate/etc.logrotate.d.$1.tmpl /etc/logrotate.d/$1
		perl -pi -e "s/<MySB_InstallDir>/$gsInstallDirEscaped/g" /etc/logrotate.d/$1
		if [ ! -z "$2" ] && [ $2 -eq 1 ]; then
			logrotate -f /etc/logrotate.d/$1
		fi
	fi
}

#### Installation of a package bundle
gfnPackageBundleInstall() {
	local sPackagesRequired sPackagesToInstall sOption

	sPackagesRequired="$1"
	sOption="$2" # can be 'reinstall' OR 'backports'

	for sPackage in $sPackagesRequired; do
		if ! gfnCheckCommand 0 $sPackage; then
			sPackagesToInstall="$sPackagesToInstall $sPackage"
		fi
		if ! dpkg -s $sPackage &> /dev/null; then
			sPackagesToInstall="$sPackagesToInstall $sPackage"
		fi
	done
	sPackagesToInstall="`echo $sPackagesToInstall | xargs -n1 | sort -u | xargs | sed -e 's/^ //g;' | sed 's/\s+$//'`"
	if [ ! -z "$sPackagesToInstall" ]; then
		gfnPackagesManage install "$sPackagesToInstall" "$sOption"
	else
		for sPackage in $sPackagesRequired; do
			echo "$sPackage is already installed !"
		done
	fi
}

#### Check if a package is installed
fnCheckPackage() {
	if [ ! -z "`dpkg-query -f '${binary:Package}\n' -W | grep "^$1$"`" ]; then
		return 0
	else
		return 1
	fi
}

#### apt-get
gfnPackagesManage() {
	local sQuery sPackageList sFinalList sOption sAptCmd sGlobalArgs sError sIgnore sMirrorsError sSystemValues
	local nReturn nAptUpdate tDiff nLocalMirror tNow tVar1 tVar2 dAptDate

	sQuery="$1"
	sPackageList="`echo $2 | sed -e 's/^ //g;'`"
	sOption="$3"
	nReturn=0
	nAptUpdate=0
	tDiff=0
	nLocalMirror=0
	sAptCmd="apt-get"

	if [ ! -z "$sOption" ] && [ "$sOption" == "backports" ]; then
		case "$sOption" in
			'backports')	sGlobalArgs="-y --assume-yes -t $gsDebianRelease-$sOption";;
			'reinstall')	sGlobalArgs="-y --assume-yes --reinstall";;
		esac
	else
		sGlobalArgs="-y --assume-yes"
	fi

	if [ "$gbIsReady_MySB_Db" == "YES" ]; then
		sSystemValues="`cmdMySQL 'MySB_db' "SELECT apt_update,apt_date FROM system WHERE id_system='1';" | sed 's/\t/|/g;'`"
		nAptUpdate="`echo $sSystemValues | awk '{split($0,a,"|"); print a[1]}'`"
		dAptDate="`echo $sSystemValues | awk '{split($0,a,"|"); print a[2]}'`"
		if [ "$dAptDate" == "0000-00-00 00:00:00" ]; then
			dAptDate="`date +%Y-%m-%d\ %H:%M:%S`"
			cmdMySQL 'MySB_db' "UPDATE system SET apt_date='$dAptDate' WHERE id_system='1';" -v
		fi
		dAptDate=$(date -d "$dAptDate" +"%Y-%m-%d %H")
		tNow=$(date +%Y-%m-%d\ %H)
		tVar1=$(date --date="$dAptDate" +'%-H')
		tVar2=$(date --date="$tNow" +'%-H')
		let "tDiff=$tVar2-$tVar1"
	fi

	#### Check last update
	if [ "$sQuery" != "test" ]; then
		if [ "$gbIsReady_MySB_Db" == "YES" ]; then
			#### Need of 'apt-get update' ? (must be greater than 2 hours OR forced)
			if [ $nAptUpdate -eq 1 ] || [ $tDiff -gt 2 ] || [[ "$sQuery" = *"upgrade"* ]]; then
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs autoremove --purge"
				echo "------------------------------"
				$sAptCmd $sGlobalArgs autoremove --purge
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs autoclean"
				echo "------------------------------"
				$sAptCmd $sGlobalArgs autoclean
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs clean"
				echo "------------------------------"
				$sAptCmd $sGlobalArgs clean

				if gfnCheckCommand 0 apt-mirror && [ -f /etc/apt/mirror.list ]; then
					case "$sQuery" in
						'install')
							for Package in $sPackageList; do
								case "$Package" in
									'webmin'|'pgld'|'pglcmd'|'pglgui')	nLocalMirror=1;;
								esac
							done
						;;
						'upgrade')	nLocalMirror=1;;
					esac
 					if [ $nLocalMirror -eq 1 ]; then
						echo
						echo "------------------------------"
						echo "apt-mirror"
						echo "------------------------------"
						apt-mirror
					fi
				fi

				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -o Acquire::Check-Valid-Until=false update"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -o 'Acquire::Check-Valid-Until=false' update
				cmdMySQL 'MySB_db' "UPDATE system SET apt_update='0', apt_date='`date +%Y-%m-%d\ %H:%M:%S`' WHERE id_system='1';" -v
			fi
		else
			echo
			echo "------------------------------"
			echo "$sAptCmd $sGlobalArgs -o Acquire::Check-Valid-Until=false update (MySQL not ready)"
			echo "------------------------------"
			export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -o 'Acquire::Check-Valid-Until=false' update
		fi
	fi

	case "$sQuery" in
		'install')
			if [ -z "$sPackageList" ]; then
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -f -V -o Dpkg::Options::=\"--force-confold\" install"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -f -V -o Dpkg::Options::="--force-confold" install
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -f -V -o Dpkg::Options::=\"--force-confold\" --fix-broken install"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -f -V -o Dpkg::Options::="--force-confold" --fix-broken install
			else
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -V -o Dpkg::Options::=\"--force-confold\" install $sPackageList"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -V -o Dpkg::Options::="--force-confold" install $sPackageList
			fi
		;;
		'upgrade')
			if [ "`$sAptCmd --help | grep safe-upgrade | awk '{ print $1 }'`" == "safe-upgrade" ]; then
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -V -o Dpkg::Options::=\"--force-confold\" safe-upgrade"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -V -o Dpkg::Options::="--force-confold" safe-upgrade
			else
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -V -o Dpkg::Options::=\"--force-confold\" upgrade"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -V -o Dpkg::Options::="--force-confold" upgrade
			fi
		;;
		'dist-upgrade')
			if [ "`$sAptCmd --help | grep dist-upgrade | awk '{ print $1 }'`" == "dist-upgrade" ]; then
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -V -o Dpkg::Options::=\"--force-confold\" dist-upgrade"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -V -o Dpkg::Options::="--force-confold" dist-upgrade
			else
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs -V -o Dpkg::Options::=\"--force-confold\" full-upgrade"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs -V -o Dpkg::Options::="--force-confold" full-upgrade
			fi
		;;
		'purge')
			sFinalList=""
			for Package in $sPackageList; do
				if fnCheckPackage $Package; then
					sFinalList="${sFinalList} $Package"
				fi
			done
			sFinalList="`echo $sFinalList | sed -e 's/^ //g;'`"

			if [ ! -z "$sFinalList" ]; then
				echo
				echo "------------------------------"
				echo "$sAptCmd $sGlobalArgs purge $sFinalList"
				echo "------------------------------"
				export DEBIAN_FRONTEND=noninteractive; $sAptCmd $sGlobalArgs purge $sFinalList
			fi
		;;
	esac

	nReturn=$?

	return $nReturn
}

##################### LAST LINE ######################################
